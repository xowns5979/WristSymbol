}
if (x[i,]$action == "up")
{
count = count + 1
}
}
library(imager)
image <- load.image("data/gw/gw_aligned.png")
plot(image, axes=0)
for (i in 1:nrow(x)){
if(x[i,]$action=="down")
{
if(x[i,]$startpoint == 1)
color = "#E23838"
else if(x[i,]$startpoint == 2)
color = "#F78200"
else if(x[i,]$startpoint == 3)
color = "#973999"
else if(x[i,]$startpoint == 4)
color = "#5EBD3E"
points(x[i,]$x, x[i,]$y, col=color, cex=0.6, pch=16)
}
else if (x[i,]$action=="up")
{
if(x[i,]$endpoint == 1)
color = "#E23838"
else if(x[i,]$endpoint == 2)
color = "#F78200"
else if(x[i,]$endpoint == 3)
color = "#973999"
else if(x[i,]$endpoint == 4)
color = "#5EBD3E"
points(x[i,]$x, x[i,]$y, col=color, cex=0.6, pch=16)
}
}
# sd
x
# sd
x[x$startpoint==1,]
# sd
x[x$startpoint==1,]
x[x$endpoint==1,]
# distance from true actuator (picked for mean-2sd ~ mean+2sd)
x2 = x[x$startpoint==1,]
x3 = x[x$endpoint==1,]
# distance from true actuator (picked for mean-2sd ~ mean+2sd)
x2 = x[x$startpoint==1,]
x3 = x[x$endpoint==1,]
x2[x2$action=="down"]
x2[x2$action=="down",]
x3[x3$action=="up"]
x3[x3$action=="up",]
nrow(x3[x3$action=="up",])
nrow(x2[x2$action=="down",])
x2[x2$action=="down",]
x2[x2$action=="down",]$x
x2[x2$action=="down",]$y
x2[x2$action=="down",]$x[1]
# distance from true actuator (picked for mean-2sd ~ mean+2sd)
actuator1_x=912
actuator1_y=510
actuator2_x=1188
actuator2_y=490
actuator3_y=784
actuator3_x=934
actuator4_x=1220
actuator4_y=748
pointDistance()
library(raster)
install.packages('raster')
library(raster)
pointDistance()
pointDistance(c(actuator1_x,actuator1_y),c(x2[x2$action=="down",]$x[1],x2[x2$action=="down",]$x[1]))
pointDistance(c(actuator1_x,actuator1_y),c(x2[x2$action=="down",]$x[1],x2[x2$action=="down",]$x[1]),FALSE)
pointDistance(c(actuator1_x,actuator1_y),c(x2[x2$action=="down",]$x[1],x2[x2$action=="down",]$x[1]),TRUE)
pointDistance(c(actuator1_x,actuator1_y),c(x2[x2$action=="down",]$x[1],x2[x2$action=="down",]$x[1]),FALSE)
x_point_start = x2[x2$action=="down",]$x
y_point_start = x2[x2$action=="down",]$y
x_point_end = x3[x3$action=="up",]$x
y_point_end = x3[x3$action=="up",]$y
x_point = c(x_point_start, x_point_end)
y_point = c(y_point_start, y_point_end)
distance_df = data.frame("x_point"=x_point, "y_point"=y_point)
distance_df
distance_df$distance = 0
pointDistance(c(actuator1_x,actuator1_y),c(x2[x2$action=="down",]$x,x2[x2$action=="down",]$x),FALSE)
distance = c()
distance = c(distance, 3)
distance
distance = c()
len(x_point)
length(x_point)
distance = c()
for (i in length(x_point)){
pd = pointDistance(c(actuator1_x,actuator1_y),c(x_point[i], y_point[i]),FALSE)
distance = c(distance, pd)
}
distance
distance = c()
x_point[5]
distance = c()
for (i in length(x_point)){
pd = pointDistance(c(actuator1_x,actuator1_y),c(x_point[i], y_point[i]),FALSE)
distance = c(distance, pd)
}
distance
distance = c(distance, 123)
distance
distance = c(distance, 1235)
distance
distance = c()
for (i in length(x_point)){
pd = pointDistance(c(actuator1_x,actuator1_y),c(x_point[i], y_point[i]),FALSE)
print(pd)
distance = c(distance, pd)
}
distance = c()
for (i in 1:length(x_point)){
pd = pointDistance(c(actuator1_x,actuator1_y),c(x_point[i], y_point[i]),FALSE)
print(pd)
distance = c(distance, pd)
}
distance
distance_df = data.frame("x_point"=x_point, "y_point"=y_point, "distance"=distance_df)
distance_df
distance_df = data.frame("x_point"=x_point, "y_point"=y_point, "distance"=distance)
distance_df
sd(distance_df$distance)
mean(distance_df$distance)
dist_sd = sd(distance_df$distance)
dist_mean = mean(distance_df$distance)
distance_df[distance_df$distance >= mean-2*sd,]
distance_df[distance_df$distance >= dist_mean-2*dist_sd,]
dist_mean-2*dist_sd
dist_mean+2*dist_sd
dist_mean-1*dist_sd
distance_df[distance_df$distance >= dist_mean+dist_sd,]
distance_df[distance_df$distance <= dist_mean+dist_sd,]
distance_df2=distance_df[distance_df$distance <= dist_mean+dist_sd,]
distance_df2
mean(distance_df2$x_poin)
mean(distance_df2$y_point)
actuators_x = c(912, 1188, 934, 1220)
actuators_y = c(510, 490, 784, 748)
library(raster)
target_actuator=1
x2 = x[x$startpoint==target_actuator,]
x_point_start = x2[x2$action=="down",]$x
y_point_start = x2[x2$action=="down",]$y
x3 = x[x$endpoint==target_actuator,]
x_point_end = x3[x3$action=="up",]$x
y_point_end = x3[x3$action=="up",]$y
x_point = c(x_point_start, x_point_end)
y_point = c(y_point_start, y_point_end)
distance = c()
for (i in 1:length(x_point)){
pd = pointDistance(c(actuators_x[target_actuator],
actuators_y[target_actuators]),
c(x_point[i], y_point[i]),FALSE)
distance = c(distance, pd)
}
distance_df = data.frame("x_point"=x_point, "y_point"=y_point, "distance"=distance)
for (i in 1:length(x_point)){
pd = pointDistance(c(actuators_x[target_actuator],
actuators_y[target_actuator]),
c(x_point[i], y_point[i]),FALSE)
distance = c(distance, pd)
}
actuators_x = c(912, 1188, 934, 1220)
actuators_y = c(510, 490, 784, 748)
target_actuator=1
x2 = x[x$startpoint==target_actuator,]
x_point_start = x2[x2$action=="down",]$x
y_point_start = x2[x2$action=="down",]$y
x3 = x[x$endpoint==target_actuator,]
x_point_end = x3[x3$action=="up",]$x
x_point = c(x_point_start, x_point_end)
y_point_end = x3[x3$action=="up",]$y
y_point = c(y_point_start, y_point_end)
distance = c()
for (i in 1:length(x_point)){
pd = pointDistance(c(actuators_x[target_actuator],
actuators_y[target_actuator]),
c(x_point[i], y_point[i]),FALSE)
distance = c(distance, pd)
}
distance_df = data.frame("x_point"=x_point, "y_point"=y_point, "distance"=distance)
dist_sd = sd(distance_df$distance)
dist_mean = mean(distance_df$distance)
distance_df2=distance_df[distance_df$distance <= dist_mean+dist_sd,]
mean(distance_df2$x_poin)
mean(distance_df2$y_point)
distance_df3=distance_df[distance_df$distance > dist_mean+dist_sd,]
distance_df3
mean(distance_df2$x_poin)
mean(distance_df2$y_point)
distance_df2
mean(distance_df2$x_poin)
distance_df2$x_poin
mean(distance_df2$x_point)
mean(distance_df2$x_poi)
mean(distance_df2$e)
mean(distance_df2$x_poin)
mean(distance_df2$x_po)
mean(distance_df2$x_p)
mean(distance_df2$x_)
mean(distance_df2$x)
mean(distance_df2$y)
mean(distance_df2$x_point)
mean(distance_df2$y_point)
mean(distance_df2$x_pointk)
mean(distance_df2$x_poink)
mean(distance_df2$x_poin)
mean(distance_df2$x_point)
mean(distance_df2$y_point)
plot(image, axes=0)
color_set = c("#E23838","#F78200","#973999","#5EBD3E")
plot(image, axes=0)
color_set = c("#E23838","#F78200","#973999","#5EBD3E")
#Draw points
for (i in 1:nrow(x)){
if(x[i,]$action=="down")
{
color = color_set[x[i,]$startpoint]
points(x[i,]$x, x[i,]$y, col=color, cex=0.6, pch=16)
}
else if (x[i,]$action=="up")
{
if(x[i,]$endpoint == 1)
color = "#E23838"
else if(x[i,]$endpoint == 2)
color = "#F78200"
else if(x[i,]$endpoint == 3)
color = "#973999"
else if(x[i,]$endpoint == 4)
color = "#5EBD3E"
points(x[i,]$x, x[i,]$y, col=color, cex=0.6, pch=16)
}
}
plot(image, axes=0)
points(500, 500, col=color_set[1], cex=5, pch=16)
points(500, 500, col=color_set[1], cex=4, pch=16)
points(700, 500, col=color_set[1], cex=3, pch=16)
points(800, 500, col=color_set[1], cex=2, pch=16)
points(mean(distance_df2$x_point), mean(distance_df2$y_point), col=color_set[1], cex=2, pch=16)
x_perceived = c()
y_perceived = c()
actuators_x_perceived = c()
actuators_y_perceived = c()
actuators_x = c(912, 1188, 934, 1220)
actuators_y = c(510, 490, 784, 748)
actuators_x_perceived = c()
actuators_y_perceived = c()
for (target_actuator in 1:4){
x2 = x[x$startpoint==target_actuator,]
x_point_start = x2[x2$action=="down",]$x
y_point_start = x2[x2$action=="down",]$y
x3 = x[x$endpoint==target_actuator,]
x_point_end = x3[x3$action=="up",]$x
y_point_end = x3[x3$action=="up",]$y
x_point = c(x_point_start, x_point_end)
y_point = c(y_point_start, y_point_end)
distance = c()
for (i in 1:length(x_point)){
pd = pointDistance(c(actuators_x[target_actuator],
actuators_y[target_actuator]),
c(x_point[i], y_point[i]),FALSE)
distance = c(distance, pd)
}
distance_df = data.frame("x_point"=x_point, "y_point"=y_point, "distance"=distance)
dist_sd = sd(distance_df$distance)
dist_mean = mean(distance_df$distance)
distance_df2=distance_df[distance_df$distance <= dist_mean+dist_sd,]
distance_df3=distance_df[distance_df$distance > dist_mean+dist_sd,]
distance_df3
final_x = mean(distance_df2$x_point)
final_y = mean(distance_df2$y_point)
actuators_x_perceived = c(actuators_x_perceived, final_x)
actuators_y_perceived = c(actuators_y_perceived, final_y)
}
plot(image, axes=0)
points(actuators_x_perceived[target_actuator],actuators_y_perceived[target_actuator] , col=color_set[1], cex=2, pch=16)
}
plot(image, axes=0)
for (target_actuator in 1:4){
points(actuators_x_perceived[target_actuator],
actuators_y_perceived[target_actuator],
col=color_set[target_actuator],
cex=2, pch=16)
}
exp_data = read.csv("data/yb/yb_exp.csv")
x = read.csv("data/yb/yb_touchdata.csv")
x$pattern = ""
x$startpoint = 0
x$endpoint = 0
count = 1
for (i in 1:nrow(x)){
x[i,]$pattern = as.character(exp_data$pattern[count])
if(x[i,]$pattern=="a(3)"){
x[i,]$startpoint = 1
x[i,]$endpoint = 2
}
else if (x[i,]$pattern=="b(4)"){
x[i,]$startpoint = 1
x[i,]$endpoint = 4
}
else if (x[i,]$pattern=="c(5)"){
x[i,]$startpoint = 1
x[i,]$endpoint = 3
}
else if (x[i,]$pattern=="d(5)"){
x[i,]$startpoint = 2
x[i,]$endpoint = 4
}
else if (x[i,]$pattern=="e(6)"){
x[i,]$startpoint = 2
x[i,]$endpoint = 3
}
else if (x[i,]$pattern=="f(7)"){
x[i,]$startpoint = 2
x[i,]$endpoint = 1
}
else if (x[i,]$pattern=="g(7)"){
x[i,]$startpoint = 4
x[i,]$endpoint = 3
}
else if (x[i,]$pattern=="h(0)"){
x[i,]$startpoint = 4
x[i,]$endpoint = 1
}
else if (x[i,]$pattern=="i(1)"){
x[i,]$startpoint = 4
x[i,]$endpoint = 2
}
else if (x[i,]$pattern=="j(1)"){
x[i,]$startpoint = 3
x[i,]$endpoint = 1
}
else if (x[i,]$pattern=="k(2)"){
x[i,]$startpoint = 3
x[i,]$endpoint = 2
}
else if (x[i,]$pattern=="l(3)"){
x[i,]$startpoint = 3
x[i,]$endpoint = 4
}
if (x[i,]$action == "up")
{
count = count + 1
}
}
image <- load.image("data/yb/yb_aligned.png")
plot(image, axes=0)
actuators_x = c(1178, 1446, 1150, 1426)
actuators_y = c(614, 636, 870, 882)
actuators_x_perceived = c()
actuators_y_perceived = c()
for (target_actuator in 1:4){
x2 = x[x$startpoint==target_actuator,]
x_point_start = x2[x2$action=="down",]$x
y_point_start = x2[x2$action=="down",]$y
x3 = x[x$endpoint==target_actuator,]
x_point_end = x3[x3$action=="up",]$x
y_point_end = x3[x3$action=="up",]$y
x_point = c(x_point_start, x_point_end)
y_point = c(y_point_start, y_point_end)
distance = c()
for (i in 1:length(x_point)){
pd = pointDistance(c(actuators_x[target_actuator],
actuators_y[target_actuator]),
c(x_point[i], y_point[i]),FALSE)
distance = c(distance, pd)
}
distance_df = data.frame("x_point"=x_point, "y_point"=y_point, "distance"=distance)
dist_sd = sd(distance_df$distance)
dist_mean = mean(distance_df$distance)
distance_df2=distance_df[distance_df$distance <= dist_mean+dist_sd,]
distance_df3=distance_df[distance_df$distance > dist_mean+dist_sd,]
distance_df3
final_x = mean(distance_df2$x_point)
final_y = mean(distance_df2$y_point)
actuators_x_perceived = c(actuators_x_perceived, final_x)
actuators_y_perceived = c(actuators_y_perceived, final_y)
}
for (target_actuator in 1:4){
points(actuators_x_perceived[target_actuator],
actuators_y_perceived[target_actuator],
col=color_set[target_actuator],
cex=2, pch=16)
}
exp_data = read.csv("data/sm/sm_exp.csv")
x = read.csv("data/sm/sm_touchdata.csv")
x$pattern = ""
x$startpoint = 0
x$endpoint = 0
count = 1
for (i in 1:nrow(x)){
x[i,]$pattern = as.character(exp_data$pattern[count])
if(x[i,]$pattern=="a(3)"){
x[i,]$startpoint = 1
x[i,]$endpoint = 2
}
else if (x[i,]$pattern=="b(4)"){
x[i,]$startpoint = 1
x[i,]$endpoint = 4
}
else if (x[i,]$pattern=="c(5)"){
x[i,]$startpoint = 1
x[i,]$endpoint = 3
}
else if (x[i,]$pattern=="d(5)"){
x[i,]$startpoint = 2
x[i,]$endpoint = 4
}
else if (x[i,]$pattern=="e(6)"){
x[i,]$startpoint = 2
x[i,]$endpoint = 3
}
else if (x[i,]$pattern=="f(7)"){
x[i,]$startpoint = 2
x[i,]$endpoint = 1
}
else if (x[i,]$pattern=="g(7)"){
x[i,]$startpoint = 4
x[i,]$endpoint = 3
}
else if (x[i,]$pattern=="h(0)"){
x[i,]$startpoint = 4
x[i,]$endpoint = 1
}
else if (x[i,]$pattern=="i(1)"){
x[i,]$startpoint = 4
x[i,]$endpoint = 2
}
else if (x[i,]$pattern=="j(1)"){
x[i,]$startpoint = 3
x[i,]$endpoint = 1
}
else if (x[i,]$pattern=="k(2)"){
x[i,]$startpoint = 3
x[i,]$endpoint = 2
}
else if (x[i,]$pattern=="l(3)"){
x[i,]$startpoint = 3
x[i,]$endpoint = 4
}
if (x[i,]$action == "up")
{
count = count + 1
}
}
image <- load.image("data/sm/sm_aligned.png")
actuators_x = c(1420, 1680, 1380, 1656)
actuators_y = c(602, 628, 856, 880)
actuators_x_perceived = c()
actuators_y_perceived = c()
for (target_actuator in 1:4){
x2 = x[x$startpoint==target_actuator,]
x_point_start = x2[x2$action=="down",]$x
y_point_start = x2[x2$action=="down",]$y
x3 = x[x$endpoint==target_actuator,]
x_point_end = x3[x3$action=="up",]$x
y_point_end = x3[x3$action=="up",]$y
x_point = c(x_point_start, x_point_end)
y_point = c(y_point_start, y_point_end)
distance = c()
for (i in 1:length(x_point)){
pd = pointDistance(c(actuators_x[target_actuator],
actuators_y[target_actuator]),
c(x_point[i], y_point[i]),FALSE)
distance = c(distance, pd)
}
distance_df = data.frame("x_point"=x_point, "y_point"=y_point, "distance"=distance)
dist_sd = sd(distance_df$distance)
dist_mean = mean(distance_df$distance)
distance_df2=distance_df[distance_df$distance <= dist_mean+dist_sd,]
distance_df3=distance_df[distance_df$distance > dist_mean+dist_sd,]
distance_df3
final_x = mean(distance_df2$x_point)
final_y = mean(distance_df2$y_point)
actuators_x_perceived = c(actuators_x_perceived, final_x)
actuators_y_perceived = c(actuators_y_perceived, final_y)
}
plot(image, axes=0)
for (target_actuator in 1:4){
points(actuators_x_perceived[target_actuator],
actuators_y_perceived[target_actuator],
col=color_set[target_actuator],
cex=2, pch=16)
}
color_set = c("#E23838","#F78200","#973999","#5EBD3E")
plot(image, axes=0)
#Draw points
for (i in 1:nrow(x)){
if(x[i,]$action=="down")
{
color = color_set[x[i,]$startpoint]
points(x[i,]$x, x[i,]$y, col=color, cex=0.6, pch=16)
}
else if (x[i,]$action=="up")
{
if(x[i,]$endpoint == 1)
color = "#E23838"
else if(x[i,]$endpoint == 2)
color = "#F78200"
else if(x[i,]$endpoint == 3)
color = "#973999"
else if(x[i,]$endpoint == 4)
color = "#5EBD3E"
points(x[i,]$x, x[i,]$y, col=color, cex=0.6, pch=16)
}
}
